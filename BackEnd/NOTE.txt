Create a new solution
and add a new project named `BackEnd` using File / New / ASP.NET Core Web Application. 
Select the Web API template, No Auth, no Docker support

Add a new `Models` folder to the root of the application.

Add models here

Next we'll create a new Entity Framework DbContext. Create a new `ApplicationDbContext` 
class in the `Models` folder using the following code:

Add a connection string to the appsettings.json file for this database:
 "ConnectionStrings": {
       "DefaultConnection": "Server=(localdb)\\mssqllocaldb;
	   Database=aspnet-BackEnd-931E56BD-86CB-4A96-BD99-2C6A6ABB0829;
	   Trusted_Connection=True;MultipleActiveResultSets=true"
     },

Add the following code to the top of the `ConfigureServices()` method in `Startup.cs`:

services.AddDbContext<ApplicationDbContext>(options =>
    {
        if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
        {
            options.UseSqlServer(Configuration.GetConnectionString("DefaultConnection"));
        }
        else
        {
            options.UseSqlite("Data Source=conferences.db");
        }
    });

	 Run the following commands in the Package Manager Console
   ```console
   Add-Migration Initial
   Update-Database

Run the following commands in the command prompt:
    ```console
    dotnet build
    dotnet ef migrations add Initial
    dotnet ef database update

If your database ever gets in a bad state and you'd like to reset things, you can use 
`dotnet ef database drop` followed by 
`dotnet ef database update` to remove your database and run all migrations again.

Right-click the `Controllers` folder and select Add/Controller. Select 
"API Controller with actions, using Entity Framework".

Install the "Microsoft.VisualStudio.Web.CodeGeneration.Design" package

dotnet tool install --global dotnet-aspnet-codegenerator  // if you want to scaffold from the console

Testing the API using the Swashbuckle
https://github.com/domaindrivendev/swashbuckle.aspnetcore

In the ConfigureServices method of Startup.cs, register 
the Swagger generator, defining one or more Swagger documents.

1. Configure Swashbuckle by adding the following lines to top of the `Configure` method in `Startup.cs`:
    ```csharp
    app.UseSwagger();

    app.UseSwaggerUI(options =>
        options.SwaggerEndpoint("/swagger/v1/swagger.json", "Event Planner API v1")
    );
    ```
    > ***Note:* Due to how the middleware and pipeline are structured, you'll want to place this before the `app.UseMvc()` statement.**
1. Add a redirect to the end of the pipeline that redirects to the swagger end point. 
   ```csharp
   app.Run(context =>
   {
       context.Response.Redirect("/swagger");
       return Task.CompletedTask;
   });

   ```

   Building out the DTO
   Add a new class library by rght clicking on the solution and choosing .NET Standard
   Add this project to backend project as a dependency

   From the command line
      dotnet new classlib -o ConferenceDTO -f netstandard2.0

	dotnet add reference ../ConferenceDTO/ConferenceDTO.csproj  // from the command line

